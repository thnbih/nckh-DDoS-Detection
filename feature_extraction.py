# -*- coding: utf-8 -*-
"""Feature extraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LCyfE35MjIsMQHNEpkgGvxY5eHR7B-dq
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

"""# Load data"""

from google.colab import drive
drive.mount('/content/drive')

Path = 'drive/MyDrive/dataset'

data = pd.read_csv(Path+'/Syn.csv')

"""# Select important features"""

#data cu

# X = data[['pktcount', 'bytecount', 'dur', 'flows',
#           'pktperflow', 'byteperflow']]
# y = data['label']

#cac data moi
X = data[[' Total Fwd Packets', 'Total Length of Fwd Packets', ' Flow Duration', ' Flow Packets/s']]
y = data[' Label']

"""Split into train and test"""

X_train, X_test, y_train, y_test = train_test_split(X, y)

"""##Normalize data"""

import numpy as np

"""Check value"""

print(np.isinf(X_train).sum())
print(np.max(X_train))
print(np.isinf(X_test).sum())
print(np.max(X_test))

"""Fit value"""

X_train.replace([np.inf, -np.inf], np.nan, inplace=True)
X_train.fillna(X_train.mean(), inplace=True)
X_test.replace([np.inf, -np.inf], np.nan, inplace=True)
X_test.fillna(X_test.mean(), inplace=True)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""Do PCA for feature reduction"""

pca = PCA(n_components=2)
X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)

"""Save normalized and reduced features"""

pd.DataFrame(X_train).to_csv('X_train.csv')
pd.DataFrame(X_test).to_csv('X_test.csv')

"""#Random Forest"""

from sklearn.ensemble import RandomForestClassifier

"""Load normalized and reduced features"""

X_train = pd.read_csv('X_train.csv', index_col=0)
X_test = pd.read_csv('X_test.csv', index_col=0)

"""Load labels"""

y_train = data[' Label'].loc[X_train.index]
y_test = data[' Label'].loc[X_test.index]

"""Create a Random Forest classifier"""

rf = RandomForestClassifier(n_estimators=100, random_state=42)

"""Fit the classifier to the training data"""

rf.fit(X_train, y_train)

"""Predict on the test data"""

y_pred = rf.predict(X_test)

"""Evaluate the model"""

accuracy = (y_pred == y_test).mean()
print("Accuracy:", accuracy)

print("Reduced Features:")
print(pd.DataFrame(X_train).head())

"""#PCA

Load normalized data
"""

X_train = pd.read_csv('X_train.csv', index_col=0)
X_test = pd.read_csv('X_test.csv', index_col=0)

"""Create PCA object"""

pca = PCA(n_components=2)

"""Fit and transform the data"""

X_train_embedded = pca.fit_transform(X_train)
X_test_embedded = pca.transform(X_test)

"""Save embedded features"""

pd.DataFrame(X_train_embedded).to_csv('X_train_embedded.csv')
pd.DataFrame(X_test_embedded).to_csv('X_test_embedded.csv')

"""Scatter plot of embedded features"""

import matplotlib.pyplot as plt
plt.scatter(X_train_embedded[:, 0], X_train_embedded[:, 1])
plt.xlabel('Embedded Feature 1')
plt.ylabel('Embedded Feature 2')
plt.title('Embedded Features Scatter Plot')
plt.show()